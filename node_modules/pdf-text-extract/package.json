{
  "name": "pdf-text-extract",
  "version": "1.3.1",
  "description": "Extract text from pdfs that contain searchable pdf text",
  "main": "index.js",
  "bin": {
    "pdf-text-extract": "./bin/pdf-text-extract.js"
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node_modules/.bin/mocha --reporter spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nisaacson/pdf-text-extract.git"
  },
  "keywords": [
    "pdf",
    "extract",
    "pdftotext",
    "text",
    "extract"
  ],
  "author": {
    "name": "Noah Isaacson"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "devDependencies": {
    "mocha": "~1.8.2",
    "should": "~1.2.2"
  },
  "dependencies": {
    "yargs": "^1.2.5"
  },
  "readme": "# PDF Text Extract\n\nExtract text from pdfs that contain searchable pdf text. The module is wrapper that calls the `pdftotext` command to perform the actual extraction\n\n[![Build Status](https://travis-ci.org/nisaacson/pdf-text-extract.png?branch=master)](https://travis-ci.org/nisaacson/pdf-text-extract) [![Dependency Status](https://david-dm.org/nisaacson/pdf-text-extract.png)](https://david-dm.org/nisaacson/pdf-text-extract)\n\n# Installation\n```bash\nnpm install pdf-text-extract\n```\n\n\nYou will need the `pdftotext` binary available on your path. There are packages available for many different operating systems\n\nSee [https://github.com/nisaacson/pdf-extract#osx](https://github.com/nisaacson/pdf-extract#osx) for how to install the `pdftotext` command\n\n\n# Usage\n\n## As a module\n\n```javascript\nvar path = require('path')\nvar filePath = path.join(__dirname, 'test/data/multipage.pdf')\nvar extract = require('pdf-text-extract')\nextract(filePath, function (err, pages) {\n  if (err) {\n    console.dir(err)\n    return\n  }\n  console.dir(pages)\n})\n```\nThe output will be an array of where each entry is a page of text. If you want just a string of all pages you can set the option to `splitPages: false`.\n\n```javascript\nvar filePath = path.join(__dirname, 'test/data/multipage.pdf')\nvar extract = require('pdf-text-extract')\nextract(filePath, { splitPages: false }, function (err, text) {\n  if (err) {\n    console.dir(err)\n    return\n  }\n  console.dir(text)\n})\n```\n\nYou can set the following options:\n- `firstPage`: First page to extract\n- `lastPage`: Last page to extract\n- `resolution`: in dpi, as is specified by pdftotext -r\n- `crop`: Should be an object { x:x, y:y, w:w, h:h }\n- `layout`: Should be either `layout`, `raw` or `htmlmeta`. Default: `layout`\n- `encoding`: Should be either `UCS-2`, `ASCII7`, `Latin1`, `UTF-8`, `ZapfDingbats` or `Symbol`. Default: `UTF-8`\n- `eol`: End of line convention. One of either: `unix`, `dos` or `mac`\n- `ownerPassword`: Owner password (for encrypted files)\n- `userPassword`: User password (for encrypted files)\n- `splitPages`: If true, the result will be and array of pages. Default: true.\n\n\nIf needed you can pass an optional arguments to the extract function. These will be passed to the `child_process.spawn` call.\n\n```javascript\nvar filePath = path.join(__dirname, 'test/data/multipage.pdf')\nvar extract = require('pdf-text-extract')\nvar options = {\n  cwd: \"./\"\n}\nextract(filePath, options, function (err, pages) {\n  if (err) {\n    console.dir(err)\n    return\n  }\n  console.dir('extracted pages', pages)\n})\n```\n\n\n\n## As a command line tool\n\n```bash\nnpm install -g pdf-text-extract\n```\n\nExecute with the filePath as an argument. Output will be json-formatted array of pages\n\n```bash\npdf-text-extract ./test/data/multipage.pdf\n# outputs\n# ['<page 1 content...>', '<page 2 content...>']\n```\n\n# Test\n\n```bash\n# install dev dependencies\nnpm install\n# run tests\nnpm test\n",
  "bugs": {
    "url": "https://github.com/nisaacson/pdf-text-extract/issues"
  },
  "_id": "pdf-text-extract@1.3.1",
  "dist": {
    "shasum": "d95ccc8e2e4f6b0002dd7335a51503a8b38e00af"
  },
  "_from": "pdf-text-extract@",
  "_resolved": "https://registry.npmjs.org/pdf-text-extract/-/pdf-text-extract-1.3.1.tgz"
}
